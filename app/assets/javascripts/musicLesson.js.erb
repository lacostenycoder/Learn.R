function initMusicLesson(musicLessonObj) {

  var keyLookup = {
    90: "c2",
    83: "c-2",
    88: "d2",
    68: "d-2",
    67: "e2",
    86: "f2",
    71: "f-2",
    66: "g2",
    72: "g-2",
    78: "a3",
    74: "a-3",
    77: "b3",
    81: "c3",
    50: "c-3",
    87: "d3",
    51: "d-3",
    69: "e3",
    82: "f3",
    53: "f-3",
    84: "g3",
    54: "g-3",
    89: "a4",
    55: "a-4",
    85: "b4",
    73: "c5"
  }

  var keyHeld = {
    "c2": false,
    "c-2": false,
    "d2": false,
    "d-2": false,
    "e2": false,
    "f2": false,
    "f-2": false,
    "g2": false,
    "g-2": false,
    "a3": false,
    "a-3": false,
    "b3": false,
    "c3": false,
    "c-3": false,
    "d3": false,
    "d-3": false,
    "e3": false,
    "f3": false,
    "f-3": false,
    "g3": false,
    "g-3": false,
    "a4": false,
    "a-4": false,
    "b4": false,
    "c5": false
  }

  // 25 empty sound objects to be declaired on banks
  var sound01, sound02, sound03, sound04, sound05, sound06, sound07, sound08, sound09, sound10, sound11, sound12, sound13, sound14, sound15, sound16, sound17, sound18, sound19, sound20, sound21, sound22, sound23, sound24, sound25;

  var context = new webkitAudioContext(); // Create Audio Container
  sourceGainNode = context.createGainNode(); // Create source gain control
  compressorPost = context.createDynamicsCompressor(); // Create post filter compressor
  masterGainNode = context.createGainNode(); // Create master gain control

  var musicLessonID = musicLessonObj.id;
  var lessonSeq = musicLessonObj.solution_key_pattern; // this will come from database
  var lessonText = "Here is a C major scale. Can you play it?"
  var userInput = ""; //initialize empty strings for functions
  var keyCheck;
  var keyToPlay;
  var gameWon = false;
  var selectedInstrument = "piano";
  var audioSourcePrefix = '<audio src="/assets/piano/';
  var audioSourcePath = '/assets/piano/';
  var lessonMode = false;
  var sustainPedal = false;
  var note;

  // end main var declairations

  // set event listeners for mouse and key presses

  $('#lesson').click(function(){
    lessonMode = true;
    startLesson();
  });

  $( "body" ).on( "keydown", function( event ) {
    keyDown(event);
  });

  $( "body" ).on( "keyup", function( event ) {
    keyUp(event);
  });

  $("body").on("loadSounds", function( even ) {
    loadSounds(event);
  });

  $( "#sound-selector" ).change(function(e) {
    selectedInstrument = (e.target.value);
    audioSourcePrefix = '<audio src="/assets/' + selectedInstrument + '/';
    audioSourcePath = '/assets' + selectedInstrument + '/';
    var keyboardPartial = $('#keyboard-partial')
    if (selectedInstrument === 'guitar') {
      keyboardPartial.css('background', "url('/assets/guitar.png') no-repeat");
      keyboardPartial.css('background-size', '90%');
      keyBank('guitar');
    } else {
      keyboardPartial.css('background-size', '78%');
      keyboardPartial.css('background', "url('/assets/grandpiano.png') no-repeat");
      keyBank('piano');
    }
    keyboardPartial.css('height', '800px');
  });

    var keyBank = function(bank){
      var arr = [
       "c2",
       "c-2",
       "d2",
       "d-2",
       "e2",
       "f2",
       "f-2",
       "g2",
       "g-2",
       "a3",
       "a-3",
       "b3",
       "c3",
       "c-3",
       "d3",
       "d-3",
       "e3",
       "f3",
       "f-3",
       "g3",
       "g-3",
       "a4",
       "a-4",
       "b4",
       "c5"
      ]
      for(i=0; i < arr.length; i++) {
        console.log('count is: ' + i);
        var filename = arr[i]
        var path = "../assets/" + bank + "/" + filename + ".mp3";
        keyPlayer(filename, path );
      }
    }

  function updateSoundSelector( newSelectElement ) {
    $("#sound-selector").empty().append( newSelectElement.childNodes );
  }

  function keyDown( event ){
    playAudioFile;
    if (event.which == 80){ sustainPedal = !!((sustainPedal == false)); }
    keyPressed = event.which;
    keyToPlay = keyLookup[keyPressed];
    if (!keyHeld[keyToPlay]) {
      playKey(keyToPlay);
      $("#"+keyToPlay ).addClass("keypress");
      if (userInput.length > 100){
        alert('Sorry, try again!');
        userInput = "";
      }
      if (lessonMode) {
        userInput += (keyPressed + ", ").toString();
        console.log(userInput);
      }
      keyHeld[keyToPlay] = true;
    }
  }

  function keyUp( event ) {
    keyToRelease = keyLookup[event.which];
    keyHeld[keyToRelease] = false;
    if (!sustainPedal){ fadeVolume(keyToRelease); }
    $('#'+keyToRelease).removeClass('keypress');
    if(!gameWon){
      checkAnswer(userInput);
    } else {
      userInput = "";
      gameWon = false;
    }
  }

  function playKey(keyId){
    if (!keyHeld[keyId]) {
      var thisKey = $('#'+keyToPlay);
      if (thisKey.length > 0) {
        thisKey.find('audio').remove();
        thisKey.append(audioSourcePrefix + keyId + '.mp3"></audio>');
      }
        thisKey.find('audio').trigger('play');
    }
  }

   playAudioFile = function () {
       var source = context.createBufferSource();
       source.buffer = savedBuffer;
       source.connect(sourceGainNode);
       source.noteOn(0); // Play sound immediately
       };

   // new functions using web audio api buffering
  function keyPlayer(domNode,fileDirectory) {
    this.domNode = domNode;
    this.fileDirectory = fileDirectory;
    var playAudioFile = playAudioFile;
    var incomingBuffer;
    var savedBuffer;
    var xhr;

    var xhr = new XMLHttpRequest();
    xhr.open('get',fileDirectory, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function () {
    context.decodeAudioData(xhr.response,
       function(incomingBuffer) {
       savedBuffer = incomingBuffer; // Save the buffer, we'll reuse it
     // Once the file is loaded, listen for click on div
     // Use playAudioFile since it no longer requires a buffer to be passed to it
       note = document.getElementById(domNode);
       //note.addEventListener("mouseover", playAudioFile , true);
         }
      );
    };
    xhr.send();
  }

  function fadeVolume( event ){
    var keyToFade = "#" + event + ">audio";
    $(keyToFade).animate({volume: 0}, 200, function () {});
  }

  function playLesson(keyCheck){
    if (lessonMode) {
      $("#"+keyLookup[keyCheck] ).addClass("keypress");
      playLessonKey(keyLookup[keyCheck]);
      $('.key').removeClass('keypress');
    }
  }


  function playLessonKey(keyId){
   $('.lesson-player').empty();
    //This might not work in produciton
    var audioTag = $(audioSourcePrefix + keyId + '.mp3"></audio>');
    audioTag.appendTo('.lesson-player');
    $('.lesson-player audio').eq(0).trigger('play');
  }

  function startLesson(){
    $('.player').empty();
    $('.lesson-player').empty();
    $('.lesson-player').append(lessonText);
    playSequence(lessonSeq);
  }

  function playSequence(seq){
    var notes = seq.split(', ');
    var max = notes.length;
    var counter = 0;
    var i = setInterval(function(){
      if (counter >= 0) {
        $('.key').removeClass('keypress');
        var note = notes[counter];
        var keyCode = keyLookup[note];
        $("div#"+keyCode).addClass("keypress");
        playLessonKey(keyCode);
      }
      counter ++;
      if (counter > max) {
        clearInterval(i);
      }
    }, 500);
  }

  function checkAnswer(userInput){
    if (userInput.indexOf(lessonSeq) > -1 && lessonMode) {
      gameWon = true;
      lessonMode = false;
      //alert('You won!');
      $.ajax({
        url: ('/music_lessons/' + musicLessonID + '/update-win'),
        method: 'post'
      });
    }
  }

} //End Music Lesson

function getMusicLesson() {
  var lessonID = $('.music-lesson-id').eq(0).data().id;
  var lesson = $.ajax({
    url: ('/music_lessons/' + lessonID),
    method: 'get',
    dataType: 'json',
    async: false
  });
  return lesson.responseJSON;
}
