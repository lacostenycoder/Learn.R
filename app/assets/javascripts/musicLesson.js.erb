function initMusicLesson(musicLessonObj) {

  var keyLookup = {
    90: "c2",
    83: "c-2",
    88: "d2",
    68: "d-2",
    67: "e2",
    86: "f2",
    71: "f-2",
    66: "g2",
    72: "g-2",
    78: "a3",
    74: "a-3",
    77: "b3",
    81: "c3",
    50: "c-3",
    87: "d3",
    51: "d-3",
    69: "e3",
    82: "f3",
    53: "f-3",
    84: "g3",
    54: "g-3",
    89: "a4",
    55: "a-4",
    85: "b4",
    73: "c5"
  }

  var keyToPlay = {
    90: 0,
    83: 1,
    88: 2,
    68: 3,
    67: 4,
    86: 5,
    71: 6,
    66: 7,
    72: 8,
    78: 9,
    74: 10,
    77: 11,
    81: 12,
    50: 13,
    87: 14,
    51: 15,
    69: 16,
    82: 17,
    53: 18,
    84: 19,
    54: 20,
    89: 21,
    55: 22,
    85: 23,
    73: 24
  }

  var keyHeld = {
    "c2": false,
    "c-2": false,
    "d2": false,
    "d-2": false,
    "e2": false,
    "f2": false,
    "f-2": false,
    "g2": false,
    "g-2": false,
    "a3": false,
    "a-3": false,
    "b3": false,
    "c3": false,
    "c-3": false,
    "d3": false,
    "d-3": false,
    "e3": false,
    "f3": false,
    "f-3": false,
    "g3": false,
    "g-3": false,
    "a4": false,
    "a-4": false,
    "b4": false,
    "c5": false
  }

  window.AudioContext = window.AudioContext || window.webkitAudioContext;
  context = new AudioContext();
  sourceGainNode = context.createGainNode();
  compressorPost = context.createDynamicsCompressor();
  masterGainNode = context.createGainNode();
  bufferLoader = new BufferLoader();
  keyBank('piano');
  // 25 empty sound objects to be declaired on banks
  var sound01, sound02, sound03, sound04, sound05, sound06, sound07, sound08, sound09, sound10, sound11, sound12, sound13, sound14, sound15, sound16, sound17, sound18, sound19, sound20, sound21, sound22, sound23, sound24, sound25;

  var musicLessonID = musicLessonObj.id;
  var lessonSeq = musicLessonObj.solution_key_pattern; // this will come from database
  var lessonText = "Here is a C major scale. Can you play it?"
  var userInput = ""; //initialize empty strings for functions
  var keyCheck;
  var keyToPlay;
  var gameWon = false;
  var selectedInstrument = "piano";
  var audioSourcePrefix = '<audio src="/assets/piano/';
  var lessonMode = false;
  var sustainPedal = false;

  // set event listeners for mouse and key presses

  $('#lesson').click(function(){
    lessonMode = true;
    startLesson();
  });

  $( "body" ).on( "keydown", function( event ) {
    keyDown(event);
  });

  $( "body" ).on( "keyup", function( event ) {
    keyUp(event);
  });

  $( "#sound-selector" ).change(function(e) {
    selectedInstrument = (e.target.value);
    audioSourcePrefix = '<audio src="/assets/' + selectedInstrument + '/';
    var keyboardPartial = $('#keyboard-partial')
    if (selectedInstrument === 'guitar') {
      keyboardPartial.css('background', "url('/assets/guitar.png') no-repeat");
      keyboardPartial.css('background-size', '90%');
    } else {
      keyboardPartial.css('background-size', '78%');
      keyboardPartial.css('background', "url('/assets/grandpiano.png') no-repeat");
    }
    keyboardPartial.css('height', '800px');
  });

  function updateSoundSelector( newSelectElement ) {
    $("#sound-selector").empty().append( newSelectElement.childNodes );
  }

  function keyDown( event ){
    //playAudioFile;
    if (event.which == 80){ sustainPedal = !!((sustainPedal == false)); }
    keyPressed = event.which;
    keyToPlay = keyLookup[keyPressed];
    if (!keyHeld[keyToPlay]) {
      playKey(keyToPlay, keyPressed);
      $("#"+keyToPlay ).addClass("keypress");
      if (userInput.length > 100){
        alert('Sorry, try again!');
        userInput = "";
      }
      if (lessonMode) {
        userInput += (keyPressed + ", ").toString();
        console.log(userInput);
      }
      keyHeld[keyToPlay] = true;
    }
  }

  function keyUp( event ) {
    keyToRelease = keyLookup[event.which];
    keyHeld[keyToRelease] = false;
    if (!sustainPedal){ fadeVolume(keyToRelease); }
    $('#'+keyToRelease).removeClass('keypress');
    if(!gameWon){
      checkAnswer(userInput);
    } else {
      userInput = "";
      gameWon = false;
    }
  }

  function playKey(keyId, keyKey){
    if (!keyHeld[keyId]) {
      var thisKey = $('#'+keyToPlay);
      if (thisKey.length > 0) {
        thisKey.find('audio').remove();
        thisKey.append(audioSourcePrefix + keyId + '.mp3"></audio>');
        console.log(keyId);
        var id = keyLookup[keyId];
        sound01 = context.createBufferSource();
        sound01.buffer = eval('bufferLoader.bufferList[' + keyKey + ']');
        sound01.connect(context.destination);
        sound01.start();
      }
        //thisKey.find('audio').trigger('play');
        sound01.start(0);

    }
  }


  function fadeVolume( event ){
    var keyToFade = "#" + event + ">audio";
    $(keyToFade).animate({volume: 0}, 200, function () {});
  }

  function playLesson(keyCheck){
    if (lessonMode) {
      $("#"+keyLookup[keyCheck] ).addClass("keypress");
      playLessonKey(keyLookup[keyCheck]);
      $('.key').removeClass('keypress');
    }
  }

  function playKey(keyId){
    if (!keyHeld[keyId]) {
      var thisKey = $('#'+keyToPlay);
      if (thisKey.length > 0) {
        thisKey.find('audio').remove();
        thisKey.append(audioSourcePrefix + keyId + '.mp3"></audio>');
      }
        thisKey.find('audio').trigger('play');
    }
  }

  function playLessonKey(keyId){
   $('.lesson-player').empty();
    //This might not work in produciton
    var audioTag = $(audioSourcePrefix + keyId + '.mp3"></audio>');
    audioTag.appendTo('.lesson-player');
    $('.lesson-player audio').eq(0).trigger('play');
  }

  function startLesson(){
    $('.player').empty();
    $('.lesson-player').empty();
    $('.lesson-player').append(lessonText);
    playSequence(lessonSeq);
  }

  function playSequence(seq){
    var notes = seq.split(', ');
    var max = notes.length;
    var counter = 0;
    var i = setInterval(function(){
      if (counter >= 0) {
        $('.key').removeClass('keypress');
        var note = notes[counter];
        var keyCode = keyLookup[note];
        $("div#"+keyCode).addClass("keypress");
        playLessonKey(keyCode);
      }
      counter ++;
      if (counter > max) {
        clearInterval(i);
      }
    }, 500);
  }

  function checkAnswer(userInput){
    if (userInput.indexOf(lessonSeq) > -1 && lessonMode) {
      gameWon = true;
      lessonMode = false;
      //alert('You won!');
      $.ajax({
        url: ('/music_lessons/' + musicLessonID + '/update-win'),
        method: 'post'
      });
    }
  }

} //End Music Lesson

function getMusicLesson() {
  var lessonID = $('.music-lesson-id').eq(0).data().id;
  var lesson = $.ajax({
    url: ('/music_lessons/' + lessonID),
    method: 'get',
    dataType: 'json',
    async: false
  });
  return lesson.responseJSON;
}
